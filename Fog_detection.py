# -*- coding: utf-8 -*-
"""paper27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FV0wIDzvM4leJUn4QItManG8GLwFxrUE
"""

# prompt: drive mount

from google.colab import drive
drive.mount('/content/drive')

import cv2
import numpy as np
import matplotlib.pyplot as plt

img = cv2.imread('/content/drive/MyDrive/Computer vision/Data/Fog/Fog_images/foggy-002.jpg')

plt.imshow(img)

img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

plt.imshow(img)

import cv2
import numpy as np

def detect_fog(image):


    # Convert to grayscale for contrast and sharpness analysis
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # 1. Contrast Measurement (Histogram Spread)
    contrast = np.std(gray)  # Standard deviation of pixel intensity
    contrast_threshold = 30  # Low contrast threshold for fog detection

    # 2. Edge Sharpness (Laplacian Variance)
    laplacian_var = cv2.Laplacian(gray, cv2.CV_64F).var()
    sharpness_threshold = 100  # Low sharpness indicates fog

    # 3. Color Desaturation (HSV Saturation Analysis)
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    saturation = hsv[:, :, 1]  # Extract saturation channel
    avg_saturation = np.mean(saturation)
    saturation_threshold = 50  # Low saturation indicates fog

    # Decision
    is_foggy = contrast < contrast_threshold and laplacian_var < sharpness_threshold and avg_saturation < saturation_threshold

    # Print results
    print(f"Contrast: {contrast:.2f} (Threshold: {contrast_threshold})")
    print(f"Sharpness (Laplacian Variance): {laplacian_var:.2f} (Threshold: {sharpness_threshold})")
    print(f"Average Saturation: {avg_saturation:.2f} (Threshold: {saturation_threshold})")
    print("Fog detected!" if is_foggy else "No significant fog detected.")


detect_fog(img)

img_g = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

plt.imshow(img_g, cmap='gray')

import numpy as np
import cv2
import os
from skimage.feature import graycomatrix, graycoprops
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix
import joblib
import matplotlib.pyplot as plt
import seaborn as sns

def glcm_features(image):
    # Convert image to grayscale
    if len(image.shape) == 3:
        gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    else:
        gray_image = image

    # Reduce gray levels (0–255 to 0–7) to reduce memory usage
    gray_image = (gray_image / 32).astype(np.uint8)  # 256 / 8 = 32

    # GLCM parameters
    distances = [1]
    angles = [0, np.pi/4, np.pi/2, 3*np.pi/4]

    # Compute GLCM and extract features
    glcm = graycomatrix(gray_image, distances=distances, angles=angles, levels=8, symmetric=True, normed=True)
    features = [
        graycoprops(glcm, 'contrast').mean(),
        graycoprops(glcm, 'dissimilarity').mean(),
        graycoprops(glcm, 'homogeneity').mean(),
        graycoprops(glcm, 'energy').mean(),
        graycoprops(glcm, 'correlation').mean(),
        graycoprops(glcm, 'ASM').mean()
    ]
    return features

# Paths (update as needed)
foggy_folder = "/content/drive/MyDrive/Computer vision/Data1/Input"
non_foggy_folder = "/content/drive/MyDrive/Computer vision/Data1/Output"

features_list = []
labels = []

# Process foggy images (Label: 1)
for filename in os.listdir(foggy_folder):
    if filename.lower().endswith(('.png', '.jpg', '.jpeg')):
        image_path = os.path.join(foggy_folder, filename)
        image = cv2.imread(image_path)
        features = glcm_features(image)
        features_list.append(features)
        labels.append(1)

# Process non-foggy images (Label: 0)
for filename in os.listdir(non_foggy_folder):
    if filename.lower().endswith(('.png', '.jpg', '.jpeg')):
        image_path = os.path.join(non_foggy_folder, filename)
        image = cv2.imread(image_path)
        features = glcm_features(image)
        features_list.append(features)
        labels.append(0)

# Convert to NumPy arrays
X = np.array(features_list)
y = np.array(labels)

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Cross-validation
model = LogisticRegression(max_iter=1000)
cv_scores = cross_val_score(model, X_scaled, y, cv=5)
print(f"Cross-Validated Accuracy (5-fold): {cv_scores.mean():.4f}")

# Train/test split for final model
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
model.fit(X_train, y_train)

# Prediction & Evaluation
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Test Accuracy: {accuracy:.4f}")

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Non-Foggy', 'Foggy'], yticklabels=['Non-Foggy', 'Foggy'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Save model and scaler
joblib.dump(model, "glcm_fog_classifier.pkl")
joblib.dump(scaler, "scaler.pkl")
print("Model and scaler saved.")

def predict_fog(image_path, model, scaler):
    # Load and preprocess image
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Extract GLCM features
    features = np.array(glcm_features(image)).reshape(1, -1)

    # Standardize features using the trained scaler
    features_scaled = scaler.transform(features)

    # Predict using the trained model
    prediction = model.predict(features_scaled)

    # Interpret result
    return "Foggy" if prediction[0] == 1 else "Non-Foggy"

# Example usage
test_image_path = "/content/drive/MyDrive/Computer vision/Data1/Output/01_GT.png"  # Update with the actual test image path
result = predict_fog(test_image_path, model, scaler)
print(f"The image is classified as: {result}")

import numpy as np
import cv2
import os
from skimage.feature import graycomatrix, graycoprops
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, r2_score
import joblib
import matplotlib.pyplot as plt

def glcm_features(image):
    if len(image.shape) == 3:
        gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    else:
        gray_image = image

    # Reduce levels for memory efficiency (0–255 to 0–7)
    gray_image = (gray_image / 32).astype(np.uint8)

    distances = [1]
    angles = [0, np.pi/4, np.pi/2, 3*np.pi/4]
    glcm = graycomatrix(gray_image, distances=distances, angles=angles, levels=8, symmetric=True, normed=True)

    features = [
        graycoprops(glcm, 'contrast').mean(),
        graycoprops(glcm, 'dissimilarity').mean(),
        graycoprops(glcm, 'homogeneity').mean(),
        graycoprops(glcm, 'energy').mean(),
        graycoprops(glcm, 'correlation').mean(),
        graycoprops(glcm, 'ASM').mean()
    ]
    return features

# Paths
foggy_folder = "/content/drive/MyDrive/Computer vision/Data1/Input"
non_foggy_folder = "/content/drive/MyDrive/Computer vision/Data1/Output"

features_list = []
labels = []

# Foggy images with estimated fog percentage
for filename in os.listdir(foggy_folder):
    if filename.lower().endswith(('.png', '.jpg', '.jpeg')):
        image_path = os.path.join(foggy_folder, filename)
        image = cv2.imread(image_path)
        features = glcm_features(image)
        features_list.append(features)

        # Simulate fog percentage label
        fog_percentage = np.random.uniform(50, 100)
        labels.append(fog_percentage)

# Non-foggy images (0%)
for filename in os.listdir(non_foggy_folder):
    if filename.lower().endswith(('.png', '.jpg', '.jpeg')):
        image_path = os.path.join(non_foggy_folder, filename)
        image = cv2.imread(image_path)
        features = glcm_features(image)
        features_list.append(features)
        labels.append(0)

# Convert to arrays
X = np.array(features_list)
y = np.array(labels)

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error: {mae:.2f}")
print(f"R-squared Score: {r2:.4f}")

# Visualization
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.7)
plt.plot([0, 100], [0, 100], '--r')
plt.xlabel("Actual Fog Percentage")
plt.ylabel("Predicted Fog Percentage")
plt.title("Actual vs Predicted Fog Level")
plt.grid(True)
plt.show()

# Save model
joblib.dump(model, "fog_regression_model.pkl")
joblib.dump(scaler, "fog_scaler.pkl")
print("Model and scaler saved.")

# Prediction function
def predict_fog_percentage(image_path, model, scaler):
    image = cv2.imread(image_path)
    features = np.array(glcm_features(image)).reshape(1, -1)
    features_scaled = scaler.transform(features)
    fog_percentage = model.predict(features_scaled)[0]
    return max(0, min(100, fog_percentage))

# Test prediction
test_image_path = "/content/drive/MyDrive/Computer vision/Data/Fog/Fog_images/foggy-001.jpg"
loaded_model = joblib.load("fog_regression_model.pkl")
loaded_scaler = joblib.load("fog_scaler.pkl")
predicted_fog = predict_fog_percentage(test_image_path, loaded_model, loaded_scaler)
print(f"Predicted Fog Percentage: {predicted_fog:.2f}%")

import joblib

# Path to your test image
test_image_path = "/content/drive/MyDrive/Computer vision/Data/Fog/Fog_images/foggy-007.jpg"

# Load the trained model and scaler
model = joblib.load("fog_regression_model.pkl")
scaler = joblib.load("fog_scaler.pkl")

# Prediction function
def predict_fog_percentage(image_path, model, scaler):
    image = cv2.imread(image_path)
    features = np.array(glcm_features(image)).reshape(1, -1)
    features_scaled = scaler.transform(features)
    fog_percentage = model.predict(features_scaled)[0]
    return max(0, min(100, fog_percentage))

# Predict fog level
predicted_fog = predict_fog_percentage(test_image_path, model, scaler)
print(f"Predicted Fog Percentage: {predicted_fog:.2f}%")

